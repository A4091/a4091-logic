	PARTNO		U205 ;
	NAME		U205 ;
	DATE		July 8, 1992 ;
	REV		0 ;
	DESIGNER	Dave Haynie ;
	COMPANY		Commodore ;
	ASSEMBLY	A3090 ;
	LOCATION	West Chester ;
	DEVICE		p22v10 ;

/************************************************************************/
/*									*/
/*	A3090	Buffer and termination control.				*/
/*									*/
/*	This device manages data buffer direction, enable, and latch	*/
/*	functions, address buffer enable, and slave cycle termination.	*/
/*									*/
/************************************************************************/
/*									*/
/* DEVICE DATA:								*/
/*									*/
/*	Device:		22V10-15					*/
/*	Clock:		CLK (33MHz)					*/
/*	Unused:		16(I/O)						*/
/*									*/
/************************************************************************/
/*									*/
/* REVISION HISTORY:							*/
/*									*/
/*	DBH Jul  8:	Original version.				*/
/*									*/
/************************************************************************/

/** INPUTS: **/

PIN 1		=  CLK		;	/* 33MHz system clock. */
PIN 2		= !SLAVE	;	/* Board select. */
PIN 3		= !MYBUS	;	/* The A3090 has the bus. */
PIN 4		=  DOE		;	/* Data phase on Zorro III. */
PIN 5		=  FCS		;	/* Z3 full cycle strobe. */
PIN 6		=  READ		;	/* The Zorro III read cycle. */
PIN 7		= !SLACK	;	/* The NCR 53C710 slave acknowledge. */
PIN 8		= !BURST	;	/* DMA Burst cycle? */
PIN 9		= !INTREG	;	/* Interrupt register access. */
PIN 10		= !INTVEC	;	/* Interrupt vector access. */
PIN 11		= !CFGOUT	;	/* Configuration chain output. */
PIN 13		= !NACK		;	/* Network chip acknowledge. */
PIN 14		= !MTCR		;	/* Zorro III burst strobe. */
PIN 15		= !MASTER	;	/* SCSI chip owns the A3090 bus. */

/** OUTPUTS: **/

PIN 18		= !D2Z		;	/* Data is transferred to Zorro III bus. */
PIN 19		= !Z2D		;	/* Data is transferred from Zorro III bus. */
PIN 20		= !DBLT		;	/* Data is latched. */
PIN 21		= !DBOE		;	/* Data transfer enable. */
PIN 22		= !ABOEL	;	/* Low order address transfer enable. */
PIN 23		= !ABOEH	;	/* High order address transfer enable. */

/** BIDIRECTIONALS: **/

PIN 17		= !DTACK	;	/* Zorro III termination. */

/** OUTPUT TERMS: **/

/* This is the data output enable control.  When data buffers are
   pointed toward the board, they can turn on early in the cycle.
   This is a write for slave access, a read for DMA access.  When
   the data buffers are pointed out toward the bus, the have to 
   wait until DOE to turn on; this is a slave read or DMA write. */

DBOE		= !MYBUS & !READ & FCS & SLAVE
		#  MYBUS &  READ & FCS
		# !MYBUS &  READ & FCS & SLAVE & DOE
		#  MYBUS & !READ & FCS & DOE;

/* The data buffer direction calculations are very simple.  The data to
   Zorro III connection is made for slave reads or DMA writes.  The Zorro III
   to data bus connection is made for slave writes or DMA reads. */

D2Z		= !MYBUS & !READ & FCS & SLAVE
		#  MYBUS &  READ & FCS;

Z2D		= !MYBUS &  READ & FCS & SLAVE
		#  MYBUS & !READ & FCS;

/* The data latching function is also reasonably simple.  For either kind of 
   access, data is latched when DTACK is asserted and we're in data time.
   For burst DMA access, we have to take into account MTCR and BURST as well. */

DBLT		= !MYBUS & FCS & DTACK & DOE & SLAVE
		#  MYBUS & FCS & DTACK & DOE & !BURST
		#  MYBUS & FCS & DTACK & DOE &  BURST & MTCR;


/* The address buffer controls.  I want addresses going in unless the SCSI
   device has been granted the A3090 bus.  If so, addresses only go out when
   the A3090 has been granted the Zorro III bus.  High order addresses also
   go off very quickly after FCS is asserted. */

ABOEL		= !MYBUS & !MASTER
		#  MYBUS;

ABOEH		= !MYBUS & !MASTER
		#  MYBUS & !FCS;

/* The board needs to generate a DTACK here for slave accesses.  Most
   of the slave terminations are very simple, since they're either 
   based on a termination signal (SLACK for SCSI, NACK for net or ROM)
   or they're instant (interrupt vector R/W).  During configuration,
   any write should also be instantly terminated, that would be a 
   configuration register write (reads are governed by ROM access). */

DTACK		= SLAVE & FCS & DOE & SLACK
		# SLAVE & FCS & DOE & INTREG
		# SLAVE & FCS & DOE & INTVEC
		# SLAVE & FCS & DOE & NACK
		# SLAVE & FCS & DOE & !CFGOUT & !READ
		# SLAVE & FCS & DOE & DTACK;

DTACK.OE	= SLAVE & FCS;
